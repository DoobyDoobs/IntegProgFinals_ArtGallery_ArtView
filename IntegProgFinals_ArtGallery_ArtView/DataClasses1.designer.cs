#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IntegProgFinals_ArtGallery_ArtView
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ArtGalleryFinalsProject")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountRole(AccountRole instance);
    partial void UpdateAccountRole(AccountRole instance);
    partial void DeleteAccountRole(AccountRole instance);
    partial void InsertArtStatus(ArtStatus instance);
    partial void UpdateArtStatus(ArtStatus instance);
    partial void DeleteArtStatus(ArtStatus instance);
    partial void InsertExhibition(Exhibition instance);
    partial void UpdateExhibition(Exhibition instance);
    partial void DeleteExhibition(Exhibition instance);
    partial void InsertUserStatus(UserStatus instance);
    partial void UpdateUserStatus(UserStatus instance);
    partial void DeleteUserStatus(UserStatus instance);
    partial void InsertArt(Art instance);
    partial void UpdateArt(Art instance);
    partial void DeleteArt(Art instance);
    partial void InsertRegisteredUser(RegisteredUser instance);
    partial void UpdateRegisteredUser(RegisteredUser instance);
    partial void DeleteRegisteredUser(RegisteredUser instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::IntegProgFinals_ArtGallery_ArtView.Properties.Settings.Default.ArtGalleryFinalsProjectConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccountRole> AccountRoles
		{
			get
			{
				return this.GetTable<AccountRole>();
			}
		}
		
		public System.Data.Linq.Table<ArtStatus> ArtStatus
		{
			get
			{
				return this.GetTable<ArtStatus>();
			}
		}
		
		public System.Data.Linq.Table<Exhibition> Exhibitions
		{
			get
			{
				return this.GetTable<Exhibition>();
			}
		}
		
		public System.Data.Linq.Table<UserStatus> UserStatus
		{
			get
			{
				return this.GetTable<UserStatus>();
			}
		}
		
		public System.Data.Linq.Table<Art> Arts
		{
			get
			{
				return this.GetTable<Art>();
			}
		}
		
		public System.Data.Linq.Table<RegisteredUser> RegisteredUsers
		{
			get
			{
				return this.GetTable<RegisteredUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountRole")]
	public partial class AccountRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AccountRole_ID;
		
		private string _AccountRole_Desc;
		
		private EntitySet<RegisteredUser> _RegisteredUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountRole_IDChanging(string value);
    partial void OnAccountRole_IDChanged();
    partial void OnAccountRole_DescChanging(string value);
    partial void OnAccountRole_DescChanged();
    #endregion
		
		public AccountRole()
		{
			this._RegisteredUsers = new EntitySet<RegisteredUser>(new Action<RegisteredUser>(this.attach_RegisteredUsers), new Action<RegisteredUser>(this.detach_RegisteredUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountRole_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccountRole_ID
		{
			get
			{
				return this._AccountRole_ID;
			}
			set
			{
				if ((this._AccountRole_ID != value))
				{
					this.OnAccountRole_IDChanging(value);
					this.SendPropertyChanging();
					this._AccountRole_ID = value;
					this.SendPropertyChanged("AccountRole_ID");
					this.OnAccountRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountRole_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AccountRole_Desc
		{
			get
			{
				return this._AccountRole_Desc;
			}
			set
			{
				if ((this._AccountRole_Desc != value))
				{
					this.OnAccountRole_DescChanging(value);
					this.SendPropertyChanging();
					this._AccountRole_Desc = value;
					this.SendPropertyChanged("AccountRole_Desc");
					this.OnAccountRole_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountRole_RegisteredUser", Storage="_RegisteredUsers", ThisKey="AccountRole_ID", OtherKey="AccountRole_ID")]
		public EntitySet<RegisteredUser> RegisteredUsers
		{
			get
			{
				return this._RegisteredUsers;
			}
			set
			{
				this._RegisteredUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RegisteredUsers(RegisteredUser entity)
		{
			this.SendPropertyChanging();
			entity.AccountRole = this;
		}
		
		private void detach_RegisteredUsers(RegisteredUser entity)
		{
			this.SendPropertyChanging();
			entity.AccountRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArtStatus")]
	public partial class ArtStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ArtStatus_ID;
		
		private string _ArtStatus_Desc;
		
		private EntitySet<Art> _Arts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArtStatus_IDChanging(string value);
    partial void OnArtStatus_IDChanged();
    partial void OnArtStatus_DescChanging(string value);
    partial void OnArtStatus_DescChanged();
    #endregion
		
		public ArtStatus()
		{
			this._Arts = new EntitySet<Art>(new Action<Art>(this.attach_Arts), new Action<Art>(this.detach_Arts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtStatus_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ArtStatus_ID
		{
			get
			{
				return this._ArtStatus_ID;
			}
			set
			{
				if ((this._ArtStatus_ID != value))
				{
					this.OnArtStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._ArtStatus_ID = value;
					this.SendPropertyChanged("ArtStatus_ID");
					this.OnArtStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtStatus_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ArtStatus_Desc
		{
			get
			{
				return this._ArtStatus_Desc;
			}
			set
			{
				if ((this._ArtStatus_Desc != value))
				{
					this.OnArtStatus_DescChanging(value);
					this.SendPropertyChanging();
					this._ArtStatus_Desc = value;
					this.SendPropertyChanged("ArtStatus_Desc");
					this.OnArtStatus_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtStatus_Art", Storage="_Arts", ThisKey="ArtStatus_ID", OtherKey="ArtStatus_ID")]
		public EntitySet<Art> Arts
		{
			get
			{
				return this._Arts;
			}
			set
			{
				this._Arts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Arts(Art entity)
		{
			this.SendPropertyChanging();
			entity.ArtStatus = this;
		}
		
		private void detach_Arts(Art entity)
		{
			this.SendPropertyChanging();
			entity.ArtStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exhibition")]
	public partial class Exhibition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Exhibition_ID;
		
		private string _Exhibition_Name;
		
		private string _Exhibition_Desc;
		
		private EntitySet<Art> _Arts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExhibition_IDChanging(string value);
    partial void OnExhibition_IDChanged();
    partial void OnExhibition_NameChanging(string value);
    partial void OnExhibition_NameChanged();
    partial void OnExhibition_DescChanging(string value);
    partial void OnExhibition_DescChanged();
    #endregion
		
		public Exhibition()
		{
			this._Arts = new EntitySet<Art>(new Action<Art>(this.attach_Arts), new Action<Art>(this.detach_Arts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exhibition_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Exhibition_ID
		{
			get
			{
				return this._Exhibition_ID;
			}
			set
			{
				if ((this._Exhibition_ID != value))
				{
					this.OnExhibition_IDChanging(value);
					this.SendPropertyChanging();
					this._Exhibition_ID = value;
					this.SendPropertyChanged("Exhibition_ID");
					this.OnExhibition_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exhibition_Name", DbType="VarChar(50)")]
		public string Exhibition_Name
		{
			get
			{
				return this._Exhibition_Name;
			}
			set
			{
				if ((this._Exhibition_Name != value))
				{
					this.OnExhibition_NameChanging(value);
					this.SendPropertyChanging();
					this._Exhibition_Name = value;
					this.SendPropertyChanged("Exhibition_Name");
					this.OnExhibition_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exhibition_Desc", DbType="VarChar(50)")]
		public string Exhibition_Desc
		{
			get
			{
				return this._Exhibition_Desc;
			}
			set
			{
				if ((this._Exhibition_Desc != value))
				{
					this.OnExhibition_DescChanging(value);
					this.SendPropertyChanging();
					this._Exhibition_Desc = value;
					this.SendPropertyChanged("Exhibition_Desc");
					this.OnExhibition_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exhibition_Art", Storage="_Arts", ThisKey="Exhibition_ID", OtherKey="Exhibition_ID")]
		public EntitySet<Art> Arts
		{
			get
			{
				return this._Arts;
			}
			set
			{
				this._Arts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Arts(Art entity)
		{
			this.SendPropertyChanging();
			entity.Exhibition = this;
		}
		
		private void detach_Arts(Art entity)
		{
			this.SendPropertyChanging();
			entity.Exhibition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserStatus")]
	public partial class UserStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserStatus_ID;
		
		private string _UserStatus_Desc;
		
		private EntitySet<RegisteredUser> _RegisteredUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserStatus_IDChanging(string value);
    partial void OnUserStatus_IDChanged();
    partial void OnUserStatus_DescChanging(string value);
    partial void OnUserStatus_DescChanged();
    #endregion
		
		public UserStatus()
		{
			this._RegisteredUsers = new EntitySet<RegisteredUser>(new Action<RegisteredUser>(this.attach_RegisteredUsers), new Action<RegisteredUser>(this.detach_RegisteredUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserStatus_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserStatus_ID
		{
			get
			{
				return this._UserStatus_ID;
			}
			set
			{
				if ((this._UserStatus_ID != value))
				{
					this.OnUserStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._UserStatus_ID = value;
					this.SendPropertyChanged("UserStatus_ID");
					this.OnUserStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserStatus_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserStatus_Desc
		{
			get
			{
				return this._UserStatus_Desc;
			}
			set
			{
				if ((this._UserStatus_Desc != value))
				{
					this.OnUserStatus_DescChanging(value);
					this.SendPropertyChanging();
					this._UserStatus_Desc = value;
					this.SendPropertyChanged("UserStatus_Desc");
					this.OnUserStatus_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStatus_RegisteredUser", Storage="_RegisteredUsers", ThisKey="UserStatus_ID", OtherKey="UserStatus_ID")]
		public EntitySet<RegisteredUser> RegisteredUsers
		{
			get
			{
				return this._RegisteredUsers;
			}
			set
			{
				this._RegisteredUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RegisteredUsers(RegisteredUser entity)
		{
			this.SendPropertyChanging();
			entity.UserStatus = this;
		}
		
		private void detach_RegisteredUsers(RegisteredUser entity)
		{
			this.SendPropertyChanging();
			entity.UserStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Art")]
	public partial class Art : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Art_ID;
		
		private string _U_ID;
		
		private string _ArtStatus_ID;
		
		private string _Art_Desc;
		
		private System.Nullable<System.DateTime> _Art_Date;
		
		private int _Art_Price;
		
		private string _Art_FilePath;
		
		private string _Exhibition_ID;
		
		private string _Art_Title;
		
		private EntityRef<ArtStatus> _ArtStatus;
		
		private EntityRef<Exhibition> _Exhibition;
		
		private EntityRef<RegisteredUser> _RegisteredUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArt_IDChanging(string value);
    partial void OnArt_IDChanged();
    partial void OnU_IDChanging(string value);
    partial void OnU_IDChanged();
    partial void OnArtStatus_IDChanging(string value);
    partial void OnArtStatus_IDChanged();
    partial void OnArt_DescChanging(string value);
    partial void OnArt_DescChanged();
    partial void OnArt_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnArt_DateChanged();
    partial void OnArt_PriceChanging(int value);
    partial void OnArt_PriceChanged();
    partial void OnArt_FilePathChanging(string value);
    partial void OnArt_FilePathChanged();
    partial void OnExhibition_IDChanging(string value);
    partial void OnExhibition_IDChanged();
    partial void OnArt_TitleChanging(string value);
    partial void OnArt_TitleChanged();
    #endregion
		
		public Art()
		{
			this._ArtStatus = default(EntityRef<ArtStatus>);
			this._Exhibition = default(EntityRef<Exhibition>);
			this._RegisteredUser = default(EntityRef<RegisteredUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Art_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Art_ID
		{
			get
			{
				return this._Art_ID;
			}
			set
			{
				if ((this._Art_ID != value))
				{
					this.OnArt_IDChanging(value);
					this.SendPropertyChanging();
					this._Art_ID = value;
					this.SendPropertyChanged("Art_ID");
					this.OnArt_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_ID", DbType="VarChar(50)")]
		public string U_ID
		{
			get
			{
				return this._U_ID;
			}
			set
			{
				if ((this._U_ID != value))
				{
					if (this._RegisteredUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnU_IDChanging(value);
					this.SendPropertyChanging();
					this._U_ID = value;
					this.SendPropertyChanged("U_ID");
					this.OnU_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtStatus_ID", DbType="VarChar(50)")]
		public string ArtStatus_ID
		{
			get
			{
				return this._ArtStatus_ID;
			}
			set
			{
				if ((this._ArtStatus_ID != value))
				{
					if (this._ArtStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._ArtStatus_ID = value;
					this.SendPropertyChanged("ArtStatus_ID");
					this.OnArtStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Art_Desc", DbType="VarChar(50)")]
		public string Art_Desc
		{
			get
			{
				return this._Art_Desc;
			}
			set
			{
				if ((this._Art_Desc != value))
				{
					this.OnArt_DescChanging(value);
					this.SendPropertyChanging();
					this._Art_Desc = value;
					this.SendPropertyChanged("Art_Desc");
					this.OnArt_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Art_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Art_Date
		{
			get
			{
				return this._Art_Date;
			}
			set
			{
				if ((this._Art_Date != value))
				{
					this.OnArt_DateChanging(value);
					this.SendPropertyChanging();
					this._Art_Date = value;
					this.SendPropertyChanged("Art_Date");
					this.OnArt_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Art_Price", DbType="Int NOT NULL")]
		public int Art_Price
		{
			get
			{
				return this._Art_Price;
			}
			set
			{
				if ((this._Art_Price != value))
				{
					this.OnArt_PriceChanging(value);
					this.SendPropertyChanging();
					this._Art_Price = value;
					this.SendPropertyChanged("Art_Price");
					this.OnArt_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Art_FilePath", DbType="VarChar(255)")]
		public string Art_FilePath
		{
			get
			{
				return this._Art_FilePath;
			}
			set
			{
				if ((this._Art_FilePath != value))
				{
					this.OnArt_FilePathChanging(value);
					this.SendPropertyChanging();
					this._Art_FilePath = value;
					this.SendPropertyChanged("Art_FilePath");
					this.OnArt_FilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exhibition_ID", DbType="VarChar(50)")]
		public string Exhibition_ID
		{
			get
			{
				return this._Exhibition_ID;
			}
			set
			{
				if ((this._Exhibition_ID != value))
				{
					if (this._Exhibition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExhibition_IDChanging(value);
					this.SendPropertyChanging();
					this._Exhibition_ID = value;
					this.SendPropertyChanged("Exhibition_ID");
					this.OnExhibition_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Art_Title", DbType="VarChar(200)")]
		public string Art_Title
		{
			get
			{
				return this._Art_Title;
			}
			set
			{
				if ((this._Art_Title != value))
				{
					this.OnArt_TitleChanging(value);
					this.SendPropertyChanging();
					this._Art_Title = value;
					this.SendPropertyChanged("Art_Title");
					this.OnArt_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtStatus_Art", Storage="_ArtStatus", ThisKey="ArtStatus_ID", OtherKey="ArtStatus_ID", IsForeignKey=true)]
		public ArtStatus ArtStatus
		{
			get
			{
				return this._ArtStatus.Entity;
			}
			set
			{
				ArtStatus previousValue = this._ArtStatus.Entity;
				if (((previousValue != value) 
							|| (this._ArtStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArtStatus.Entity = null;
						previousValue.Arts.Remove(this);
					}
					this._ArtStatus.Entity = value;
					if ((value != null))
					{
						value.Arts.Add(this);
						this._ArtStatus_ID = value.ArtStatus_ID;
					}
					else
					{
						this._ArtStatus_ID = default(string);
					}
					this.SendPropertyChanged("ArtStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exhibition_Art", Storage="_Exhibition", ThisKey="Exhibition_ID", OtherKey="Exhibition_ID", IsForeignKey=true)]
		public Exhibition Exhibition
		{
			get
			{
				return this._Exhibition.Entity;
			}
			set
			{
				Exhibition previousValue = this._Exhibition.Entity;
				if (((previousValue != value) 
							|| (this._Exhibition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exhibition.Entity = null;
						previousValue.Arts.Remove(this);
					}
					this._Exhibition.Entity = value;
					if ((value != null))
					{
						value.Arts.Add(this);
						this._Exhibition_ID = value.Exhibition_ID;
					}
					else
					{
						this._Exhibition_ID = default(string);
					}
					this.SendPropertyChanged("Exhibition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisteredUser_Art", Storage="_RegisteredUser", ThisKey="U_ID", OtherKey="U_ID", IsForeignKey=true)]
		public RegisteredUser RegisteredUser
		{
			get
			{
				return this._RegisteredUser.Entity;
			}
			set
			{
				RegisteredUser previousValue = this._RegisteredUser.Entity;
				if (((previousValue != value) 
							|| (this._RegisteredUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegisteredUser.Entity = null;
						previousValue.Arts.Remove(this);
					}
					this._RegisteredUser.Entity = value;
					if ((value != null))
					{
						value.Arts.Add(this);
						this._U_ID = value.U_ID;
					}
					else
					{
						this._U_ID = default(string);
					}
					this.SendPropertyChanged("RegisteredUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegisteredUsers")]
	public partial class RegisteredUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _U_ID;
		
		private string _User_DisplayName;
		
		private System.DateTime _User_Date;
		
		private System.Nullable<char> _User_Sex;
		
		private string _User_Bio;
		
		private string _UserStatus_ID;
		
		private string _User_pfpFilePath;
		
		private string _AccountRole_ID;
		
		private string _User_Username;
		
		private string _User_Password;
		
		private EntitySet<Art> _Arts;
		
		private EntityRef<AccountRole> _AccountRole;
		
		private EntityRef<UserStatus> _UserStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnU_IDChanging(string value);
    partial void OnU_IDChanged();
    partial void OnUser_DisplayNameChanging(string value);
    partial void OnUser_DisplayNameChanged();
    partial void OnUser_DateChanging(System.DateTime value);
    partial void OnUser_DateChanged();
    partial void OnUser_SexChanging(System.Nullable<char> value);
    partial void OnUser_SexChanged();
    partial void OnUser_BioChanging(string value);
    partial void OnUser_BioChanged();
    partial void OnUserStatus_IDChanging(string value);
    partial void OnUserStatus_IDChanged();
    partial void OnUser_pfpFilePathChanging(string value);
    partial void OnUser_pfpFilePathChanged();
    partial void OnAccountRole_IDChanging(string value);
    partial void OnAccountRole_IDChanged();
    partial void OnUser_UsernameChanging(string value);
    partial void OnUser_UsernameChanged();
    partial void OnUser_PasswordChanging(string value);
    partial void OnUser_PasswordChanged();
    #endregion
		
		public RegisteredUser()
		{
			this._Arts = new EntitySet<Art>(new Action<Art>(this.attach_Arts), new Action<Art>(this.detach_Arts));
			this._AccountRole = default(EntityRef<AccountRole>);
			this._UserStatus = default(EntityRef<UserStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string U_ID
		{
			get
			{
				return this._U_ID;
			}
			set
			{
				if ((this._U_ID != value))
				{
					this.OnU_IDChanging(value);
					this.SendPropertyChanging();
					this._U_ID = value;
					this.SendPropertyChanged("U_ID");
					this.OnU_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_DisplayName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string User_DisplayName
		{
			get
			{
				return this._User_DisplayName;
			}
			set
			{
				if ((this._User_DisplayName != value))
				{
					this.OnUser_DisplayNameChanging(value);
					this.SendPropertyChanging();
					this._User_DisplayName = value;
					this.SendPropertyChanged("User_DisplayName");
					this.OnUser_DisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Date", DbType="Date NOT NULL")]
		public System.DateTime User_Date
		{
			get
			{
				return this._User_Date;
			}
			set
			{
				if ((this._User_Date != value))
				{
					this.OnUser_DateChanging(value);
					this.SendPropertyChanging();
					this._User_Date = value;
					this.SendPropertyChanged("User_Date");
					this.OnUser_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Sex", DbType="Char(1)")]
		public System.Nullable<char> User_Sex
		{
			get
			{
				return this._User_Sex;
			}
			set
			{
				if ((this._User_Sex != value))
				{
					this.OnUser_SexChanging(value);
					this.SendPropertyChanging();
					this._User_Sex = value;
					this.SendPropertyChanged("User_Sex");
					this.OnUser_SexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Bio", DbType="VarChar(255)")]
		public string User_Bio
		{
			get
			{
				return this._User_Bio;
			}
			set
			{
				if ((this._User_Bio != value))
				{
					this.OnUser_BioChanging(value);
					this.SendPropertyChanging();
					this._User_Bio = value;
					this.SendPropertyChanged("User_Bio");
					this.OnUser_BioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserStatus_ID", DbType="VarChar(50)")]
		public string UserStatus_ID
		{
			get
			{
				return this._UserStatus_ID;
			}
			set
			{
				if ((this._UserStatus_ID != value))
				{
					if (this._UserStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._UserStatus_ID = value;
					this.SendPropertyChanged("UserStatus_ID");
					this.OnUserStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_pfpFilePath", DbType="VarChar(255)")]
		public string User_pfpFilePath
		{
			get
			{
				return this._User_pfpFilePath;
			}
			set
			{
				if ((this._User_pfpFilePath != value))
				{
					this.OnUser_pfpFilePathChanging(value);
					this.SendPropertyChanging();
					this._User_pfpFilePath = value;
					this.SendPropertyChanged("User_pfpFilePath");
					this.OnUser_pfpFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountRole_ID", DbType="VarChar(50)")]
		public string AccountRole_ID
		{
			get
			{
				return this._AccountRole_ID;
			}
			set
			{
				if ((this._AccountRole_ID != value))
				{
					if (this._AccountRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountRole_IDChanging(value);
					this.SendPropertyChanging();
					this._AccountRole_ID = value;
					this.SendPropertyChanged("AccountRole_ID");
					this.OnAccountRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string User_Username
		{
			get
			{
				return this._User_Username;
			}
			set
			{
				if ((this._User_Username != value))
				{
					this.OnUser_UsernameChanging(value);
					this.SendPropertyChanging();
					this._User_Username = value;
					this.SendPropertyChanged("User_Username");
					this.OnUser_UsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string User_Password
		{
			get
			{
				return this._User_Password;
			}
			set
			{
				if ((this._User_Password != value))
				{
					this.OnUser_PasswordChanging(value);
					this.SendPropertyChanging();
					this._User_Password = value;
					this.SendPropertyChanged("User_Password");
					this.OnUser_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisteredUser_Art", Storage="_Arts", ThisKey="U_ID", OtherKey="U_ID")]
		public EntitySet<Art> Arts
		{
			get
			{
				return this._Arts;
			}
			set
			{
				this._Arts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountRole_RegisteredUser", Storage="_AccountRole", ThisKey="AccountRole_ID", OtherKey="AccountRole_ID", IsForeignKey=true)]
		public AccountRole AccountRole
		{
			get
			{
				return this._AccountRole.Entity;
			}
			set
			{
				AccountRole previousValue = this._AccountRole.Entity;
				if (((previousValue != value) 
							|| (this._AccountRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountRole.Entity = null;
						previousValue.RegisteredUsers.Remove(this);
					}
					this._AccountRole.Entity = value;
					if ((value != null))
					{
						value.RegisteredUsers.Add(this);
						this._AccountRole_ID = value.AccountRole_ID;
					}
					else
					{
						this._AccountRole_ID = default(string);
					}
					this.SendPropertyChanged("AccountRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStatus_RegisteredUser", Storage="_UserStatus", ThisKey="UserStatus_ID", OtherKey="UserStatus_ID", IsForeignKey=true)]
		public UserStatus UserStatus
		{
			get
			{
				return this._UserStatus.Entity;
			}
			set
			{
				UserStatus previousValue = this._UserStatus.Entity;
				if (((previousValue != value) 
							|| (this._UserStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserStatus.Entity = null;
						previousValue.RegisteredUsers.Remove(this);
					}
					this._UserStatus.Entity = value;
					if ((value != null))
					{
						value.RegisteredUsers.Add(this);
						this._UserStatus_ID = value.UserStatus_ID;
					}
					else
					{
						this._UserStatus_ID = default(string);
					}
					this.SendPropertyChanged("UserStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Arts(Art entity)
		{
			this.SendPropertyChanging();
			entity.RegisteredUser = this;
		}
		
		private void detach_Arts(Art entity)
		{
			this.SendPropertyChanging();
			entity.RegisteredUser = null;
		}
	}
}
#pragma warning restore 1591
